/// <reference path="../../../types/misc.d.ts" />
import '../node-polyfill-fetch';
import type { NextConfigComplete } from '../config-shared';
export interface StartServerOptions {
    dir: string;
    prevDir?: string;
    port: number;
    logReady?: boolean;
    isDev: boolean;
    hostname: string;
    useWorkers: boolean;
    allowRetry?: boolean;
    isTurbopack?: boolean;
    customServer?: boolean;
    isExperimentalTurbo?: boolean;
    minimalMode?: boolean;
    keepAliveTimeout?: number;
    onStdout?: (data: any) => void;
    onStderr?: (data: any) => void;
    nextConfig: NextConfigComplete;
}
type TeardownServer = () => Promise<void>;
export declare const checkIsNodeDebugging: () => boolean | "brk";
export declare const createRouterWorker: (routerServerPath: string, isNodeDebugging: boolean | 'brk', jestWorkerPath?: string) => Promise<import("jest-worker").Worker & {
    initialize: typeof import('./render-server').initialize;
}>;
export declare function startServer({ dir, nextConfig, prevDir, port, isDev, hostname, useWorkers, minimalMode, allowRetry, keepAliveTimeout, onStdout, onStderr, logReady, }: StartServerOptions): Promise<TeardownServer>;
export {};
