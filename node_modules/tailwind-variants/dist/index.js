import { d, b, f, c, e, a, g } from './chunk-HHQZCQ2Q.js';
import { twMerge, extendTailwindMerge } from 'tailwind-merge';

var de={twMerge:!0,twMergeConfig:{},responsiveVariants:!1},K=e=>e||void 0,M=(...e)=>K(d(e).filter(Boolean).join(" ")),B=null,v={},k=!1,j=(...e)=>C=>C.twMerge?((!B||k)&&(k=!1,B=b(v)?twMerge:extendTailwindMerge(v)),K(B(M(e)))):M(e),_=(e,C)=>{for(let y in C)e.hasOwnProperty(y)?e[y]=M(e[y],C[y]):e[y]=C[y];return e},me=(e$1,C)=>{var o,F,R,q,P;let{slots:y={},variants:p={},compoundVariants:V=[],compoundSlots:A=[],defaultVariants:ee={}}=e$1,i={...de,...C},O=M((o=e$1==null?void 0:e$1.extend)==null?void 0:o.base,e$1==null?void 0:e$1.base),d=f(p,(F=e$1==null?void 0:e$1.extend)==null?void 0:F.variants),h={...(R=e$1==null?void 0:e$1.extend)==null?void 0:R.defaultVariants,...ee};!b(i.twMergeConfig)&&!c(i.twMergeConfig,v)&&(k=!0,v=i.twMergeConfig);let $=b(y)?{}:{base:e$1==null?void 0:e$1.base,...y},w=b((q=e$1==null?void 0:e$1.extend)==null?void 0:q.slots)?$:_((P=e$1==null?void 0:e$1.extend)==null?void 0:P.slots,b($)?{base:e$1==null?void 0:e$1.base}:$),b$1=l=>{var G,H,I,J;if(b(d)&&b(y)&&b((G=e$1==null?void 0:e$1.extend)==null?void 0:G.slots))return j(O,l==null?void 0:l.class,l==null?void 0:l.className)(i);if(V&&!Array.isArray(V))throw new TypeError(`The "compoundVariants" prop must be an array. Received: ${typeof V}`);if(A&&!Array.isArray(A))throw new TypeError(`The "compoundSlots" prop must be an array. Received: ${typeof A}`);let re=(t,r,f=[],s)=>{let n=f;if(typeof r=="string")n.push(g(r).split(" ").map(a=>`${t}:${a}`));else if(Array.isArray(r))n.push(r.flatMap(a=>`${t}:${a}`));else if(typeof r=="object"&&typeof s=="string"){let a=r==null?void 0:r[s];if(a&&typeof a=="string"){let u=g(a);n[s]=n[s]?[...n[s],...u.split(" ").map(g=>`${t}:${g}`)]:u.split(" ").map(g=>`${t}:${g}`);}else Array.isArray(a)&&a.length>0&&(n[s]=a.flatMap(u=>`${t}:${u}`));}return n},U=(t,r=d,f=null)=>{let s=r==null?void 0:r[t];if(!s||b(s))return null;let n=l==null?void 0:l[t];if(n===null)return null;let a$1=a(n),u=Array.isArray(i.responsiveVariants)&&i.responsiveVariants.length>0||i.responsiveVariants===!0,g=h==null?void 0:h[t],m=[];typeof a$1=="object"&&u&&(m=Object.keys(a$1).reduce((S,x)=>{let L=a$1[x],ue=s==null?void 0:s[L];return x==="initial"?(g=L,S):Array.isArray(i.responsiveVariants)&&!i.responsiveVariants.includes(x)?S:re(x,ue,S,f)},[]));let N=s[a$1]||s[a(g)];return typeof m=="object"&&typeof f=="string"&&m[f]?_(m,N):m.length>0?[N,...m]:N},ae=()=>d?Object.keys(d).map(t=>U(t,d)):null,ne=t=>!d||typeof d!="object"?null:Object.keys(d).reduce((r,f)=>{let s=U(f,d,t),n=t==="base"&&typeof s=="string"?s:s&&s[t];return n&&r.push(n),r},[]),se=l&&Object.fromEntries(Object.entries(l).filter(([,t])=>t!==void 0)),W=t=>{var f;let r=typeof(l==null?void 0:l[t])=="object"?{[t]:(f=l[t])==null?void 0:f.initial}:{};return {...h,...se,...r}},z=(t=[])=>t==null?void 0:t.filter(({class:r,className:f,...s})=>Object.entries(s).every(([n,a])=>{let u=W(n);return Array.isArray(a)?a.includes(u[n]):u[n]===a})).flatMap(({class:r,className:f})=>[r,f]),D=()=>{var f;let t=z(V),r=z((f=e$1==null?void 0:e$1.extend)==null?void 0:f.compoundVariants);return e(r,t)},fe=()=>{let t=D();return Array.isArray(t)?t.reduce((r,f)=>{if(typeof f=="string"&&(r.base=j(r.base,f)(i)),typeof f=="object"){let s=Object.keys(f);for(let n of s)r[n]=j(r[n],f[n])(i);}return r},{}):t},le=()=>A.length<1?null:A.reduce((t,r)=>{let{slots:f=[],class:s,className:n,...a}=r;if(!b(a)){let u=Object.keys(a);for(let g of u){let m=W(g)[g];if(!m||m!==a[g])return t}}for(let u of f)t[u]||(t[u]=[]),t[u].push([s,n]);return t},{});if(!b(y)||!b((H=e$1==null?void 0:e$1.extend)==null?void 0:H.slots)){let t=(I=fe())!=null?I:[],r=(J=le())!=null?J:[];return {...typeof w=="object"&&!b(w)?Object.keys(w).reduce((s,n)=>(s[n]=a=>j(w[n],ne(n),t==null?void 0:t[n],r==null?void 0:r[n],a==null?void 0:a.class,a==null?void 0:a.className)(i),s),{}):{}}}return j(O,ae(),D(),l==null?void 0:l.class,l==null?void 0:l.className)(i)},te=()=>{if(!(!d||typeof d!="object"))return Object.keys(d)};return b$1.variantKeys=te(),b$1.base=O,b$1.slots=w,b$1.variants=d,b$1.defaultVariants=h,b$1.compoundSlots=A,b$1.compoundVariants=V,b$1};

export { j as cn, M as cnBase, de as defaultConfig, me as tv, K as voidEmpty };
